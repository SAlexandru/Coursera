


public class Percolation {
	private final int N_;
	private byte[] board_;
	private byte[] isConnectedToTheFirstRow_;
	private byte[] isConnectedToTheLastRow_;
	private boolean isPercolating_;
	
	private WeightedQuickUnionUF union_;
	
	private static final short[] dx = new short[] {-1, 0, 0, 1};
	private static final short[] dy = new short[] {0, -1, 1, 0};
	
	
	private int getIdx (int i, int j) {return (i - 1) * N_ + j - 1;}
	
	private void setOpened (int idx) {board_[idx >> 3] |= 1 << (idx & 7);}
	
	public Percolation (int N) {
		if (N <= 0) {
			throw new IllegalArgumentException("The board size cannot be <= 0");
		}
		
		N_ = N;
		isPercolating_ = false;
		board_ = new byte[N_ * N_];
		isConnectedToTheFirstRow_ = new byte[N_ * N_];
		isConnectedToTheLastRow_ = new byte[N_ * N_];
		
		union_ = new WeightedQuickUnionUF(N_ * N_);
	}
	
	public void open (int i, int j) {
		int idx = getIdx (i, j);
		
		if (idx < 0 || idx >= N_ * N_) {
			throw new IndexOutOfBoundsException();
		}
		
		board_[idx >> 3] |= 1 << (idx & 7);
		
		if (1 == i) {
			isConnectedToTheFirstRow_[idx >> 3] |= 1 << (idx & 7);
		}
		
		if (N_ == i) {
			isConnectedToTheLastRow_[idx >> 3] |= 1 << (idx & 7);
		}
		
		for (int k = 0; k < dx.length; ++k) {
			int newIdx = getIdx (i + dx[k], j + dy[k]);
			
			if (newIdx <= 0 || newIdx >= N_ * N_) continue;
			
			if ( 0 != (board_[idx >> 3] & (1 << (idx & 7))) ) {
				union_.union(idx, newIdx);
			}
			
			isConnectedToTheFirstRow_[idx >> 3] |= 1 << (idx & 7);
			
		}

		
		
	}
	
	public boolean isOpen (int i, int j) {
		int idx = getIdx(i, j);
		
		if (idx <= 0 || idx >= N_ * N_) throw new IllegalArgumentException();
		return isSet(board_, idx);
	}
	
	public boolean isFull (int i, int j) {
		int idx = getIdx(i, j);
		
		if (idx <= 0 || idx >= N_ * N_) throw new IllegalArgumentException();
		return isSet(isConnectedToTheFirstRow_, idx);
	}
	
	public boolean percolates() {
		return isPercolating_;
	}
	
	public static void main(String[] args) {
		final Percolation percolation = new Percolation(3);
		
		percolation.open(1, 1);
		System.out.print(percolation.isOpen(1, 1) + ": ");
		System.out.println(percolation.isFull(1, 1));
		
		percolation.open(1, 2);
		System.out.print(percolation.isOpen(1, 2) + ": ");
		System.out.println(percolation.isFull(1, 2));
		
		percolation.open(1, 3);
		System.out.print(percolation.isOpen(1, 3) + ": ");
		System.out.println(percolation.isFull(1, 3));
		
		System.out.println(percolation.percolates());
		
		percolation.open(3, 1);
		System.out.print(percolation.isOpen(3, 1) + ": ");
		System.out.println(percolation.isFull(3, 1));
		
		percolation.open(3, 2);
		System.out.print(percolation.isOpen(3, 2) + ": ");
		System.out.println(percolation.isFull(3, 2));
		
		percolation.open(3, 3);
		System.out.print(percolation.isOpen(3, 3) + ": ");
		System.out.println(percolation.isFull(3, 3));
		
		System.out.println(percolation.percolates());
		
		percolation.open(2, 1);
		System.out.print(percolation.isOpen(2, 1) + ": ");
		System.out.println(percolation.isFull(2, 1));
		
		percolation.open(2, 2);
		System.out.print(percolation.isOpen(2, 2) + ": ");
		System.out.println(percolation.isFull(2, 2));
		
		percolation.open(2, 3);
		System.out.print(percolation.isOpen(2, 3) + ": ");
		System.out.println(percolation.isFull(2, 3));
		
		System.out.println(percolation.percolates());
		
		
		for (int i = 1; i <= 3; ++i) {
			for (int j = 1; j <= 3; ++j) {
				System.out.println(i + " " + j + ": " + percolation.isFull(i, j) + ": " + 
														percolation.isOpen(i, j));
			}
		}
		
	
		
		
		
		
	}
}
